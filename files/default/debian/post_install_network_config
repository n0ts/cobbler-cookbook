## Start post_install_network_config generated code
#if $getVar("system_name","") != ""
#set $cmd = ""
    ## this is being provisioned by system records, not profile records
    ## so we can do the more complex stuff
    ## get the list of interface names
    #set ikeys = $interfaces.keys()
    #set osversion = $getVar("os_version","")
    #import re
    #set $vlanpattern = $re.compile("[a-zA-Z0-9]+[\.:][0-9]+")
    ## Determine if we should use the MAC address to configure the interfaces first
    ## Only physical interfaces are required to have a MAC address
    ## Also determine the number of bonding devices we have, so we can set the
    ## max-bonds option in modprobe.conf accordingly. -- jcapel
    #set $configbymac = True
    #set $numbondingdevs = 0
    #set $enableipv6 = False
    ## =============================================================================
    #for $iname in $ikeys
        ## look at the interface hash data for the specific interface
        #set $idata = $interfaces[$iname]
        ## do not configure by mac address if we don't have one AND it's not for bonding/vlans
        ## as opposed to a "real" physical interface
        #if $idata.get("mac_address", "") == "" and not $vlanpattern.match($iname) and not $idata.get("interface_type", "").lower() in ("master","bond","bridge"):
                ## we have to globally turn off the config by mac feature as we can't
                ## use it now
                #set $configbymac = False
        #end if
        ## count the number of bonding devices we have.
        #if $idata.get("interface_type", "").lower() in ("master","bond")
            #set $numbondingdevs += 1
        #end if
        ## enable IPv6 networking if we set an ipv6 address or turn on autoconfiguration
        #if $idata.get("ipv6_address", "") != "" or $ipv6_autoconfiguration == True
            #set $enableipv6 = True
        #end if
    #end for
    ## end looping through the interfaces to see which ones we need to configure.
    ## =============================================================================
    #set $i = 0
    ## setup bonding if we have to
    ## =============================================================================
    ## create a staging directory to build out our network scripts into
    ## make sure we preserve the loopback device
## create a working directory for interface scripts
#set $cmd += "mkdir /etc/network/cobbler; "
#set $cmd += "cp /etc/network/interfaces /etc/network/cobbler/; "
    ## =============================================================================
    ## Configure the system's primary hostname. This is also passed to anaconda, but
    ## anaconda doesn't seem to honour it in DHCP-setups.
    #if $hostname != ""
## set the hostname in the network configuration file
#set $cmd += "echo %s > /etc/hostname.cobbler; " % $hostname
#set $cmd += "rm -f /etc/hostname; "
#set $cmd += "mv /etc/hostname.cobbler /etc/hostname; "
## Also set the hostname now, some applications require it
## (e.g.: if we're connecting to Puppet before a reboot).
#set $cmd += "/bin/hostname \"%s\"; " % $hostname
    #end if
    #if $enableipv6 == True
#set $cmd += "cp /etc/ufw/ufw.conf.cobbler; " 
#set $cmd += "echo \"IPV6=yes\" >> /etc/ufw/ufw.conf.cobbler; "
#set $cmd += "rm -f /etc/ufw/ufw.conf; "
#set $cmd += "mv /etc/ufw/ufw.conf.cobbler /etc/ufw/ufw.conf; "
        ##if $ipv6_autoconfiguration != ""
            ##if $ipv6_autoconfiguration == True
            ##else
            ##end if
        ##end if
        ##if $ipv6_default_device != ""
        ##end if
    #end if
    ## =============================================================================
    ## now create the config file for each interface
    #for $iname in $ikeys
## Start configuration for $iname
        ## create lots of variables to use later
        #set $idata                = $interfaces[$iname]
        #set $mac                  = $idata.get("mac_address", "").upper()
        #set $mtu                  = $idata.get("mtu", "")
        #set $static               = $idata.get("static", "")
        #set $ip                   = $idata.get("ip_address", "")
        #set $netmask              = $idata.get("netmask", "")
        #set $static_routes        = $idata.get("static_routes", "")
        #set $iface_type           = $idata.get("interface_type", "").lower()
        #set $iface_master         = $idata.get("interface_master", "")
        #set $bonding_opts         = $idata.get("bonding_opts", "")
        #set $bridge_opts          = $idata.get("bridge_opts", "").split(" ")
        #set $ipv6_address         = $idata.get("ipv6_address", "")
        #set $ipv6_secondaries     = $idata.get("ipv6_secondaries", "")
        #set $ipv6_mtu             = $idata.get("ipv6_mtu", "")
        #set $ipv6_default_gateway = $idata.get("ipv6_default_gateway", "")
        #set $ipv6_static_routes   = $idata.get("ipv6_static_routes", "")
        #set $devfile              = "/etc/network/cobbler/ifcfg-" + $iname
        #set $routesfile           = "/etc/network/cobbler/static-routes-" + $iname
        ## determine if this interface is for a VLAN
        #if $vlanpattern.match($iname)
            #set $is_vlan = "true"
        #else
            #set $is_vlan = "false"
        #end if
        ## ===================================================================
        ## Things every interface get, no matter what
        ## ===================================================================
#set $cmd += "echo \"#!/bin/sh\" > %s; " % $routesfile
#set $cmd += "chmod +x %s; " % $routesfile
#set $cmd += "echo \"auto %s\" > %s; " % ($iname, $devfile)
        ## ===================================================================
        ## Actions based on manual/static/dynamic configuration
        ## ===================================================================
        #if $static
#set $cmd += "echo \"iface %s inet static\" >> %s; " % ($iname, $devfile)
        #else
#set $cmd += "echo \"iface %s inet manual\" >> %s; " % ($iname, $devfile)
        #end if 
        ## ===================================================================
        ## Actions based on bond_slave configuration
        ## ===================================================================
        #if $iface_type == "bond_slave"
#set $cmd += "echo \"    bond-master %s\" >> %s; " % ($iface_master, $devfile)
        #end if
        ## ===================================================================
        ## Actions based on static/dynamic configuration
        ## ===================================================================
        #if $static
            #if $mac == "" and $iface_type == ""
# WARNING! Configuring interfaces by their names only
#          is error-prone, and can cause issues if and when
#          the kernel gives an interface a different name
#          following a reboot/hardware changes.
            #end if
            #if $ip != "" and $iface_type not in ("slave","bond_slave","bridge_slave")
                ## Only configure static networking if an IP-address is configured
                ## and if the interface isn't slaved to another interface (bridging or bonding)
#set $cmd += "echo \"    address %s\" >> %s; " % ($ip, $devfile)
                #if $netmask == ""
                    ## Default to 255.255.255.0?
                    #set $netmask = "255.255.255.0"
                #end if
#set $cmd += "echo \"    netmask %s\" >> %s; " % ($netmask, $devfile)
            #end if
            ##if $enableipv6 == True and $ipv6_autoconfiguration == False
                ##if $ipv6_address != ""
                ##end if
                ## if $ipv6_secondaries != ""
                    ##set ipv6_secondaries = ' '.join(ipv6_secondaries)
                    ## The quotes around the ipv6 ip's need to be here
                ##end if
                ##if $ipv6_mtu != ""
                ##end if
                ##if $ipv6_default_gateway != ""
                ##end if
            ##end if
        #end if
        ## =============================================================================
        ## configure the gateway if set up (this is global, not a per-interface setting)
        #if $gateway != "" and $static
## set the gateway in the network configuration file
#set $cmd += "echo \"    gateway %s\" >> %s; " % ($gateway, $devfile)
        #end if
        ## ===================================================================
        ## Actions based on interface_type
        ## ===================================================================
        #if $iface_type in ("master","bond")
            ## if this is a bonded interface, configure it in /etc/network/interfaces
            #if $bonding_opts != ""
                #set $bonding_opts_line = ""
                #for $bonding_opt in $bonding_opts.split(" "):
                    #if $bonding_opt != ""
                        #set $bonding_opt_list = $bonding_opt.split("=")
                        #set $bonding_opt_key = $bonding_opt_list[0]
                        #set $bonding_opt_val = $bonding_opt_list[1].replace("_", " ")
                        #set $cmd += "echo \"    %s %s\" >> %s; " % ($bonding_opt_key, $bonding_opt_val, $devfile)
                    #end if
                #end for
            #end if
        #elif $iface_type == "bridge" and $iface_master != ""
#set $cmd += "echo \"    bridge_ports %s\" >> %s; " % ($iface_master, $devfile)
#set $cmd += "echo \"    bridge_fd 0\" >> %s; " % $devfile
#set $cmd += "echo \"    bridge_maxwait 0\" >> %s; " % $devfile
#set $cmd += "echo \"    bridge_stp off\" >> %s; " % $devfile
            #set $bridge_opts_line = ""
            #for $bridge_opt in $bridge_opts
                #if $bridge_opt != ""
                    #set $cmd += "echo \"    %s\" >> %s; " % ($bridge_opt, $devfile)
                #end if
            #end for
        #end if
        ## ===================================================================
        ## VLAN configuration
        ## ===================================================================
        #if $is_vlan == "true"
#set $cmd += "echo \"8021q\" >> /etc/modules; "
            #set $vlan_raw_device = $iname.split(".")[0]
            #if $vlan_raw_device != ""
#set $cmd += "echo \"    vlan-raw-device %s\" >> %s; " % ($vlan_raw_device, $devfile)
            #end if
        #end if
        ## ===================================================================
        ## Optional configuration stuff
        ## ===================================================================
        #if $mtu != ""
#set $cmd += "echo \"    mtu %s\" >> %s; " % ($mtu, $devfile)
        #end if
        ## ===================================================================
        ## Non-slave DNS configuration, when applicable
        ## ===================================================================
        ## If the interface is anything but a slave then add DNS entry
        #if $iface_type not in ("slave","bond_slave","bridge_slave") and $static
        #if $name_servers != ""
        #set $name_servers_line = ""
#set $cmd += "echo \"    dns-nameservers %s\" >> %s; " % (" ".join($name_servers), $devfile)
        #end if
        #if $name_servers_search != ""
#set $cmd += "echo \"    dns-search %s\" >> %s; " % (" ".join($name_servers_search), $devfile)
        #end if
        #end if
        ## ===================================================================
        ## Interface route configuration
        ## ===================================================================
        #for $route in $static_routes
            #set routepattern = $re.compile("[0-9/.]+:[0-9.]+")
            #if $routepattern.match($route)
                #set $routebits = $route.split(":")
                #set [$network, $router] = $route.split(":")
#set $cmd += "echo \"/sbin/route add -net %s gw %s dev %s\" >> %s; " %($network, $route, $iname, $routesfile)
            #else
# Warning: invalid route "$route"
            #end if
        #end for
        #if $enableipv6 == True
            #for $route in $ipv6_static_routes
                #set routepattern = $re.compile("[0-9a-fA-F:/]+,[0-9a-fA-F:]+")
                #if $routepattern.match($route)
                    #set $routebits = $route.split(",")
                    #set [$network, $router] = $route.split(",")
#set $cmd += "echo \"/sbin/route add -net %s gw %s dev %s\" >> $routesfile; " % ($network, $router, $iname)
                #else
# Warning: invalid ipv6 route "$route"
                #end if
            #end for
        #end if
        ## ===================================================================
        ## Done with this interface
        ## ===================================================================
        #set $i = $i + 1
## End configuration for $iname
    #end for
    ## =============================================================================
    ## Configure name server search path in /run/resolvconf/resolv.conf
    #set $num_ns = $len($name_servers)
    #set $num_ns_search = $len($name_servers_search)
    #if $num_ns_search > 0
#set $cmd += "sed -i -e \"/^search /d\" /run/resolvconf/resolv.conf; "
#set $cmd += "echo -n \"search \" >> /run/resolvconf/resolv.conf; "
        #for $nameserversearch in $name_servers_search
#set $cmd += "echo -n \"%s \" >> /run/resolvconf/resolv.conf; " % $nameserversearch
        #end for
#set $cmd += "echo \"\" >> /run/resolvconf/resolv.conf; "
    #end if
    ## =============================================================================
    ## Configure name servers in /etc/resolv.conf
    #if $num_ns > 0
#set $cmd += "sed -i -e \"/^nameserver /d\" /run/resolvconf/resolv.conf; "
        #for $nameserver in $name_servers
#set $cmd += "echo \"nameserver %s\" >> /run/resolvconf/resolv.conf; " % $nameserver
        #end for
    #end if
## Move all staged files to their final location
##rm -f /etc/network/interfaces
#for $iname in $ikeys
    #set $cmd += "sed --in-place \"/auto %s/d\" /etc/network/cobbler/interfaces; " % iname
    #set $cmd += "sed --in-place \"/iface %s/d\" /etc/network/cobbler/interfaces; " % iname
    #set $cmd += "cat /etc/network/cobbler/ifcfg-%s >> /etc/network/cobbler/interfaces; " % iname
    #set $cmd += "echo '' >> /etc/network/cobbler/interfaces; "
#end for
#set $cmd += "mv /etc/network/cobbler/interfaces /etc/network/interfaces; "
#set $cmd += "mv /etc/network/cobbler/static-routes-* /etc/network/if-up.d/; "
#set $cmd += "rm -r /etc/network/cobbler; "
#echo $cmd + "\\"
#end if
## End post_install_network_config generated code
